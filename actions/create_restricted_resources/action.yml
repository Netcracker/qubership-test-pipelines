name: 'Custom GitHub Action'
description: 'A GitHub Action that installs services to kubernetes'
inputs:
  path_to_template:
    description: 'Path to template'
    required: true
  service_branch:
    description: 'branch with release'
    required: true
runs:
  using: 'composite'
  steps:
    - name: Checkout pipeline
      uses: actions/checkout@v4
      with:
        ref: 'restricted_install'
        repository: 'Netcracker/qubership-test-pipelines'
        path: 'qubership-test-pipelines'

    - name: Checkout repo
      uses: actions/checkout@v4
      with:
        ref: '${{inputs.service.branch}}'
        repository: 'Netcracker/${{env.repository_name}}'
        path: '${{env.repository_name}}'

    - name: Create namespaces
      run: kubectl create namespace ${{env.namespace}}
      shell: bash

# Create Restriced Role and RB

    - name: Create service account
      run: kubectl create -f qubership-test-pipelines/restricted/restricted-sa.yml
      shell: bash

#    - name: Create secret
#      run: |
#        sleep 5s
#        kubectl create -f qubership-test-pipelines/restricted/secret.yml
#      shell: bash
#
#    - name: Get token
#      run: |
#        kubectl describe secret
#        kubectl get secret restricted-token -ojsonpath='{.data.token}'
#      shell: bash

#    - name: Get service account
#      run: |
#        kubectl get serviceaccount restricted-sa -oyaml
#      shell: bash

#    - name: Get secret
#      run: |
#        kubectl get secret -n default
#      shell: bash

    - name: install openssl
      run: |
        sudo apt install openssl
      shell: bash

    - name: Generate the Private Key
      run: |
        openssl genrsa -out user1.key 2048
      shell: bash

    - name: Generate the CSR
      run: |
        openssl req -new -key user1.key -out user1.csr -subj "/CN=user1/O=dev-team"
      shell: bash

    - name: Create a CSR Object in Kubernetes
      run: |
        cat <<EOF | kubectl apply -f -
        apiVersion: certificates.k8s.io/v1
        kind: CertificateSigningRequest
        metadata:
          name: user1-csr
        spec:
          request: $(cat user1.csr | base64 | tr -d '\n')
          signerName: kubernetes.io/kube-apiserver-client
          usages:
          - client auth
        EOF
      shell: bash

    - name: Approve the CSR
      run: kubectl certificate approve user1-csr
      shell: bash

    - name: Retrieve the Certificate
      run: kubectl get csr user1-csr -o jsonpath='{.status.certificate}' | base64 --decode > user1.crt
      shell: bash

    - name: Create role
      run: |
        cat <<EOF | kubectl apply -f -
        apiVersion: rbac.authorization.k8s.io/v1
        kind: Role
        metadata:
          namespace: consul
          name: dev-role
        rules:
        - apiGroups: [""]
          resources: ["pods"]
          verbs: ["get", "list", "watch"]
        EOF
      shell: bash

    - name: Create RoleBindings
      run: |
        cat <<EOF | kubectl apply -f -
        apiVersion: rbac.authorization.k8s.io/v1
        kind: RoleBinding
        metadata:
          name: dev-role-binding
          namespace: consul
        subjects:
        - kind: User
          name: user1
          apiGroup: rbac.authorization.k8s.io
        roleRef:
          kind: Role
          name: dev-role
          apiGroup: rbac.authorization.k8s.io
        EOF
      shell: bash


#    - name: Update yaml with Role
#      run: >-
#        python qubership-test-pipelines/python/replace_nc_in_template.py
#        --path_to_file='qubership-test-pipelines/restricted/full-access-role.yml'
#        --nc='${{env.namespace}}'
#      shell: bash
#
#    - name: Create Role
#      run: |
#        kubectl create -f qubership-test-pipelines/restricted/full-access-role.yml
#      shell: bash
#
#    - name: Update yaml with RoleBinding
#      run: >-
#        python qubership-test-pipelines/python/replace_nc_in_template.py
#        --path_to_file='qubership-test-pipelines/restricted/full-access-rb.yml'
#        --nc='${{env.namespace}}'
#      shell: bash
#
#    - name: Create Create RoleBindings
#      run: |
#        kubectl create -f qubership-test-pipelines/restricted/full-access-rb.yml
#      shell: bash

#    - name: Create ClusterRoles
#      run: |
#        kubectl create -f qubership-test-pipelines/restricted/${{env.service_name}}/clusterRoles
#      shell: bash
#
#    - name: Create ClusterRoleBindings
#      run: |
#        kubectl create -f qubership-test-pipelines/restricted/${{env.service_name}}/clusterRoleBindings
#      shell: bash
#
#    - name: Create CRD
#      run: |
#        kubectl create -f ${{env.repository_name}}/${{env.path_to_chart}}/crds
#        kubectl get CustomResourceDefinition consulacls.qubership.org -n consul -oyaml
#      shell: bash

    - name: get config
      run: kubectl config view
      shell: bash

    - name: Add the User Configuration
      run: kubectl config set-credentials user1 --client-certificate=user1.crt --client-key=user1.key
      shell: bash

    - name: Create a Context for the User
      run: kubectl config set-context user1-context --cluster=kind-kind --namespace=consul --user=user1
      shell: bash

    - name: Use the Context
      run: kubectl config use-context user1-context
      shell: bash

#    - name: Update config
#      run: |
#        restricted_token=$(kubectl get secret restricted-token -ojsonpath='{.data.token}')
#        echo $restricted_token
#        kubectl config set-credentials restricted-sa --token=$restricted_token
#        kubectl config set-context restricted --cluster=kind-kind --user=restricted-sa
#        kubectl config use-context restricted
#      shell: bash

#    - name: Update config
#      run: |
#        restricted_token=$(kubectl get secret restricted-token -ojsonpath='{.data.token}')
#        echo $restricted_token
#        #kubectl config set-credentials restricted-sa --token=$restricted_token
#        #kubectl config set-context --user=restricted-sa --current
#      shell: bash

    - name: get config
      run: kubectl config view --raw
      shell: bash

    - name: get pods
      run: kubectl get pods
      shell: bash

    - name: get pods
      run: kubectl get pods -n default
      shell: bash

      #-----------------------------------------------------
#    - name: Copy template
#      run: |
#        cp qubership-test-pipelines/${{inputs.path_to_template}} ${{env.repository_name}}/${{env.path_to_chart}}
#      shell: bash
#
#    - name: Update images
#      run: python qubership-test-pipelines/python/update_images.py --service_branch='${{inputs.service_branch}}'
#      shell: bash
#
#    - name: Install service with helm
#      run: |
#        IFS=$'/' read -a path <<< "$${{inputs.path_to_template}}"
#        template_name=${path[-1]}
#        echo $template_name
#        cd ${{env.repository_name}}/${{env.path_to_chart}}
#        helm install ${{env.service_name}} . -f $template_name -n ${{env.namespace}} $SET_NEW_IMAGES --timeout 10m
#      shell: bash
