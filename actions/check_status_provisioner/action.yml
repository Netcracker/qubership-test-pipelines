name: 'Custom GitHub Action'
description: 'A GitHub Action that takes an input and returns the square of the number'
#inputs:
#  namespace:
#    description: 'namespace where service is installed'
#    required: true

runs:
  using: 'composite'
  steps:
    - name: Sleep
      run: sleep 30s
      shell: bash
    - name: Get pods
      run: kubectl get pods -n ${{env.namespace}}
      shell: bash
    - name: Get provisioner logs
      run: |
        IFS=' ' read -ra pods <<< $(kubectl get pods --no-headers -o custom-columns=":metadata.name" -n ${{env.namespace}} | tr $'\n' ' ')
        for pod in "${pods[@]}"; do
          if [[ $pod == *"provisioner"* ]]; then
            provisioner_pod=$pod
          fi
        done
        if [[ $provisioner_pod ]]; then
          echo "provisioner_pod=$provisioner_pod"
          for i in {1..${{env.max_attempts}}}; do
            status=$(kubectl get pod $provisioner_pod -n ${{env.namespace}} -o jsonpath="{.status.phase}")
            if [[ "$status" == 'Succeeded' ]]; then
              break
            fi
            sleep ${{env.timeout}}
          done
          if [[ "$status" != 'Succeeded' ]]; then
            echo $provisioner_pod pod has not Succeeded status
          fi
          echo PROVISIONER LOGS:
          kubectl logs $provisioner_pod -n ${{env.namespace}}
          logs=$(kubectl logs $provisioner_pod -n ${{env.namespace}})
          if [[ $logs != *"Failed components statuses are []"* ]]; then
            echo Not all components are in succeed status after ${{env.max_attempts}} attempts
            echo PODS:
            kubectl get pods -n ${{env.namespace}}
            echo EVENTS:
            kubectl events -n ${{env.namespace}}
            exit 1
          fi
        else
          echo provisioner pod is not found
        fi
      shell: bash

    - name: Check pods status
      run: |
        IFS=' ' read -ra pods <<< $(kubectl get pods --no-headers -o custom-columns=":metadata.name" -n ${{env.namespace}} | tr $'\n' ' ')
        for pod in "${pods[@]}"; do
          if [[ $pod != *"provisioner"* ]]; then
            for i in {1..${{env.max_attempts}}}; do
              status=$(kubectl get pod $pod -n ${{env.namespace}} -o jsonpath="{.status.phase}")
              if [[ "$status" == 'Running' ]]; then
                echo status is Running
                break
              fi
              echo $pod is not in Running status
              sleep ${{env.timeout}}
            done
          fi
        done
        echo All pods are in Running status
      shell: bash

    - name: Get yaml from pods
      run: |
        file_name=${{env.namespace}}_pod_yamls.txt
        IFS=' ' read -ra pods <<< $(kubectl get pods --no-headers -o custom-columns=":metadata.name" -n ${{env.namespace}} | tr $'\n' ' ')
        echo "Yaml files from pods: " > $file_name
        for pod in "${pods[@]}"; do
            $pod >> $file_name
            kubectl get pod "$pod" -n ${{env.namespace}} -oyaml >> $file_name
        done
      shell: bash

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{github.job}}_artifacts
        path: ${{env.namespace}}_pod_yamls.txt

    - name: Get logs from all containers in pods
      run: |
        file_name=${{env.namespace}}_log_from_containers.txt
        IFS=' ' read -ra pods <<< $(kubectl get pods --no-headers -o custom-columns=":metadata.name" -n ${{env.namespace}} | tr $'\n' ' ')
        echo "Logs from all containers in pods: " > $file_name
        for pod in "${pods[@]}"; do
            containers=$(kubectl get pods --namespace kube-system -o jsonpath="{.items[*].spec.containers[*].name}")
            IFS=' ' read -ra containers_list <<< "$containers_str"
            for container in "${containers_list[@]}"; do
              $container >> $file_name
              kubectl logs "$pod" -n ${{env.namespace}} -c "$container" >> $file_name
            done
        done
      shell: bash

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{github.job}}_artifacts
        path: ${{env.namespace}}_log_from_containers.txt

    - name: Get pods
      run: |
        sleep 20s
        kubectl get pods -n ${{env.namespace}}
      shell: bash
