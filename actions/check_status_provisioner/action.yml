name: 'Custom GitHub Action'
description: 'A GitHub Action that takes an input and returns the square of the number'
#inputs:
#  namespace:
#    description: 'namespace where service is installed'
#    required: true

runs:
  using: 'composite'
  steps:
    - name: Get pods
      run: kubectl get pods -n ${{env.namespace}}
      shell: bash
    - name: Get pod names
      run: |
        pods_str=$(kubectl get pods --no-headers -o custom-columns=":metadata.name" -n ${{env.namespace}} | tr $'\n' ' ')
        echo "pods: $pods_str"
        IFS=' ' read -ra pods_list <<< "$pods_str"
        echo "pods=$pods_list[@]" >> $GITHUB_ENV
      shell: bash
    - name: Get provisioner logs
      run: |
        pods_list=${{env.pods}}
        for pod in "${pods_list[@]}"; do
          if [[ $pod == *"provisioner"* ]]; then
            provisioner_pod=$pod
          fi
        done
        if [[ $provisioner_pod ]]; then
          echo "provisioner_pod=$provisioner_pod"
          for i in {1..${{env.max_attempts}}}; do
            status=$(kubectl get pod $provisioner_pod -n ${{env.namespace}} -o jsonpath="{.status.phase}")
            echo "status=$status"
            if [[ "$status" == 'Succeeded' ]]; then
              break
            fi
            sleep ${{env.timeout}}
          done
          if [[ "$status" != 'Succeeded' ]]; then
            echo $provisioner_pod pod has not Succeeded status
          fi
          echo PROVISIONER LOGS:
          kubectl logs $provisioner_pod -n ${{env.namespace}}
          logs=$(kubectl logs $provisioner_pod -n ${{env.namespace}})
          if [[ $logs != *"Failed components statuses are []"* ]]; then
            echo Not all components are in succeed status after ${{env.max_attempts}} attempts
            echo PODS:
            kubectl get pods -n ${{env.namespace}}
            echo EVENTS:
            kubectl events -n ${{env.namespace}}
            exit 1
          fi
        else
          echo provisioner pod is not found
        fi
      shell: bash

    - name: Check pods status
      run: |
        for i in {1..${{env.max_attempts}}}; do
          status=$(kubectl get pod $test_pod -n ${{env.namespace}} -o jsonpath="{.status.phase}")
          echo "status=$status"
          if [[ "$status" == 'Running' ]]; then
            break
          fi
          sleep ${{env.timeout}}
        done
      shell: bash

    - name: Get yaml from pods
      run: |
        pods=$(kubectl get pods --no-headers -o custom-columns=":metadata.name" -n ${{env.namespace}})
        pods_str=$(echo "$pods" | tr $'\n' ' ')
        IFS=' ' read -ra elements <<< "$pods_str"
        for element in "${elements[@]}"; do
            status=$(kubectl get pod $element -o jsonpath="{.status.phase}")
            echo "$element" status is "$status"
            kubectl get pod "$element" -n ${{env.namespace}} -oyaml
        done
      shell: bash

    - name: Get logs from all containers in pods
      run: |
        pods=$(kubectl get pods --no-headers -o custom-columns=":metadata.name" -n ${{env.namespace}})
        pods_str=$(echo "$pods" | tr $'\n' ' ')
        echo "pods: $pods_str"
        IFS=' ' read -ra pods_list <<< "$pods_str"
        for pod in "${pods_list[@]}"; do
            containers=$(kubectl get pods --namespace kube-system -o jsonpath="{.items[*].spec.containers[*].name}")
            IFS=' ' read -ra containers_list <<< "$containers_str"
            for container in "${containers_list[@]}"; do
              kubectl logs "$pod" -n ${{env.namespace}} -c "$container"
            done
        done
      shell: bash

    - name: Get pods
      run: |
        sleep 20s
        kubectl get pods -n ${{env.namespace}}
      shell: bash
