name: 'Create Restricted Resources Action'
description: 'A GitHub Action to create resources before restricted installation'
inputs:
  service_name:
    description: |
      Helm release name
    required: true

  repository_name:
    description: |
      Service repository name (without organization prefix)
      Example: 'qubership-consul' for https://github.com/Netcracker/qubership-consul
    required: true

  path_to_chart:
    description: |
      Path to helm chart within service repository
      Example: 'charts/helm/consul-service'
    required: true

  namespace:
    description: |
      Kubernetes namespace for service installation
    required: true

runs:
  using: 'composite'
  steps:
    - name: Echo
      run: echo creating resources
      shell: bash
#Create CRD
    - name: Create ClusterRoles
      run: |
        restricted_folder="qubership-test-pipelines/restricted/${{inputs.service_name}}"
        if [ ! -d "restricted_folder" ]; then
          echo "::warning::Files with restricted resources not found. Resources not created."
        else
          echo "Applying ClusterRoles..."
          kubectl create -f $restricted_folder/clusterRoles
        fi
      shell: bash

    - name: Create ClusterRoleBindings
      run: |
        restricted_folder="qubership-test-pipelines/restricted/${{inputs.service_name}}"
        if [ ! -d "restricted_folder" ]; then
          echo "::warning::Files with restricted resources not found. Resources not created."
        else
          echo "Applying clusterRoleBindings..."
          kubectl create -f $restricted_folder/clusterRoleBindings
        fi
      shell: bash

    - name: Create CRD
      run: |
        kubectl create -f ${{inputs.repository_name}}/${{inputs.path_to_chart}}/crds
      shell: bash

    - name: Get CRD
      run: kubectl get crd -n ${{inputs.namespace}} -oyaml
      shell: bash

#Create Certificate
    - name: Install openssl
      run: |
        sudo apt install openssl
      shell: bash

    - name: Generate private key
      run: |
        openssl genrsa -out restricted.key 2048
      shell: bash

    - name: Generate CSR
      run: |
        openssl req -new -key restricted.key -out restricted.csr -subj "/CN=restricted/O=dev-team"
      shell: bash

    - name: Create CSR object
      run: |
        cat <<EOF | kubectl apply -f -
        apiVersion: certificates.k8s.io/v1
        kind: CertificateSigningRequest
        metadata:
          name: restricted-csr
        spec:
          request: $(cat restricted.csr | base64 | tr -d '\n')
          signerName: kubernetes.io/kube-apiserver-client
          usages:
          - client auth
        EOF
      shell: bash

    - name: Approve CSR
      run: kubectl certificate approve restricted-csr
      shell: bash

    - name: Retrieve certificate
      run: kubectl get csr restricted-csr -o jsonpath='{.status.certificate}' | base64 --decode > restricted.crt
      shell: bash

#Create Role and RB
    - name: Update yaml with Role
      run: >-
        python qubership-test-pipelines/python/replace_nc_in_template.py
        --path_to_file='qubership-test-pipelines/restricted/restricted-role.yml'
        --nc='${{inputs.namespace}}'
      shell: bash

    - name: Update yaml with RoleBinding
      run: >-
        python qubership-test-pipelines/python/replace_nc_in_template.py
        --path_to_file='qubership-test-pipelines/restricted/restricted-rb.yml'
        --nc='${{inputs.namespace}}'
      shell: bash

    - name: Create Role
      run: kubectl create -f qubership-test-pipelines/restricted/restricted-role.yml
      shell: bash

    - name: Create RoleBindings
      run: kubectl create -f qubership-test-pipelines/restricted/restricted-rb.yml
      shell: bash

#Add user to kubeconfig
    - name: Add user configuration
      run: kubectl config set-credentials restricted --client-certificate=restricted.crt --client-key=restricted.key
      shell: bash

    - name: Create context for user
      run: kubectl config set-context restricted-context --cluster=kind-kind --namespace=${{inputs.namespace}} --user=restricted
      shell: bash

    - name: Use context
      run: kubectl config use-context restricted-context
      shell: bash

    - name: Get config
      run: kubectl config view --raw
      shell: bash
