name: 'Custom GitHub Action'
description: 'A GitHub Action that takes an input and returns the square of the number'
inputs:
  namespace:
    description: 'namespace where service is installed'
    required: true
  max_attempts:
    description: 'maximum number of attempts to verify that pod status is successful'
    required: true
    default: 40
  timeout:
    description: 'timeout between attempts'
    required: true
    default: '10s'

runs:
  using: 'composite'
  steps:
    - name: Create folder for artifacts
      run: mkdir -p artifacts
      shell: bash

    - name: Get pods
      run: kubectl get pods -n ${{inputs.namespace}}
      shell: bash

    - name: Get status provisioner logs
      run: |
        echo Get status provisioner logs
        IFS=' ' read -ra pods <<< $(kubectl get pods --no-headers -o custom-columns=":metadata.name" -n ${{inputs.namespace}} | tr $'\n' ' ')
        for pod in "${pods[@]}"; do
          if [[ $pod == *"provisioner"* ]]; then
            provisioner_pod=$pod
          fi
        done
        if [[ $provisioner_pod ]]; then
          echo "provisioner_pod=$provisioner_pod"
          for i in {1..${{inputs.max_attempts}}}; do
            status=$(kubectl get pod $provisioner_pod -n ${{inputs.namespace}} -o jsonpath="{.status.phase}")
            if [[ "$status" == 'Succeeded' ]]; then
              break
            fi
            sleep ${{inputs.timeout}}
          done
          if [[ "$status" != 'Succeeded' ]]; then
            echo $provisioner_pod pod has not Succeeded status
          fi
          echo PROVISIONER LOGS:
          kubectl logs $provisioner_pod -n ${{inputs.namespace}}
          logs=$(kubectl logs $provisioner_pod -n ${{inputs.namespace}})
          if [[ $logs != *"Failed components statuses are []"* ]]; then
            echo Not all components are in succeed status after ${{inputs.max_attempts}} attempts
            echo PODS:
            kubectl get pods -n ${{inputs.namespace}}
            exit 1
          fi
        else
          echo provisioner pod is not found
        fi
      shell: bash

    - name: Check pods status
      run: |
        echo Check pods status
        IFS=' ' read -ra pods <<< $(kubectl get pods --no-headers -o custom-columns=":metadata.name" -n ${{inputs.namespace}} | tr $'\n' ' ')
        for pod in "${pods[@]}"; do
          if [[ $pod != *"provisioner"* ]]; then
            for i in {1..${{inputs.max_attempts}}}; do
              status=$(kubectl get pod $pod -n ${{inputs.namespace}} -o jsonpath="{.status.phase}")
              if [[ "$status" == 'Running' ]]; then
                break
              fi
              echo $pod is not in Running status
              sleep ${{inputs.timeout}}
            done
          fi
        done
        echo All pods are in Running status
      shell: bash

    - name: Get events from namespace
      run: | 
        echo Get events from namespace
        file_name=artifacts/${{inputs.namespace}}_events.txt
        kubectl events -n ${{inputs.namespace}} > file_name
      shell: bash

    - name: Get yaml from pods
      run: |
        echo Get yaml from pods
        file_name=artifacts/${{inputs.namespace}}_pod_yamls.txt
        IFS=' ' read -ra pods <<< $(kubectl get pods --no-headers -o custom-columns=":metadata.name" -n ${{inputs.namespace}} | tr $'\n' ' ')
        echo "Yaml files from pods: " > $file_name
        for pod in "${pods[@]}"; do
            echo $pod >> $file_name
            kubectl get pod "$pod" -n ${{inputs.namespace}} -oyaml >> $file_name
        done
        cat $file_name
      shell: bash

    - name: Get logs from all containers in pods
      run: |
        echo Get logs from all containers in pods
        file_name=artifacts/${{inputs.namespace}}_log_from_containers.txt
        IFS=' ' read -ra pods <<< $(kubectl get pods --no-headers -o custom-columns=":metadata.name" -n ${{inputs.namespace}} | tr $'\n' ' ')
        echo "Logs from all containers in pods: " > $file_name
        for pod in "${pods[@]}"; do
            containers=$(kubectl get pods --namespace kube-system -o jsonpath="{.items[*].spec.containers[*].name}")
            IFS=' ' read -ra containers_list <<< "$containers_str"
            for container in "${containers_list[@]}"; do
              echo $container >> $file_name
              kubectl logs "$pod" -n ${{inputs.namespace}} -c "$container" >> $file_name
            done
        done
      shell: bash

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{github.job}}_${{inputs.namespace}}_artifacts
        path: artifacts/

    - name: Get pods
      run: |
        kubectl get pods -n ${{inputs.namespace}}
      shell: bash
