name: Zookeeper Tests

on:
  workflow_call:
    inputs:
      service_branch:
        required: false
        type: string
      versions_file:
        description: 'Path to versions list file'
        type: string
        required: true
      pipeline_branch:
        description: 'Test pipeline branch name'
        type: string
        required: true
    secrets:
      AWS_S3_ACCESS_KEY_ID:
        required: true
      AWS_S3_ACCESS_KEY_SECRET:
        required: true

jobs:
  prepare-versions:
    runs-on: ubuntu-latest
    outputs:
      versions: ${{steps.process-versions.outputs.versions}}
      previous_version: ${{steps.process-versions.outputs.previous_version}}
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          ref: '${{inputs.service_branch}}'
          repository: 'Netcracker/qubership-zookeeper'
          path: 'qubership-zookeeper'
      - name: Process versions file
        id: process-versions
        run: |
          versions_str=$(cat qubership-zookeeper/${{inputs.versions_file}})
          versions_json=$(echo $versions_str | jq -R -s -c 'split(" ")')
          echo "versions=$versions_json" >> $GITHUB_OUTPUT
          previous_version=$(echo "$versions_json" | jq -r '.[-1]')
          echo "previous_version=$previous_version" >> $GITHUB_OUTPUT

  # ---------- Current service branch ----------
  #3-Clean [LATEST], 4-Upgrade [LATEST] Diff Params
  Clean-Latest:
    runs-on: ubuntu-latest
    name: Clean [LATEST], Upgrade [LATEST] Diff Params
    steps:
      - name: Checkout pipeline
        uses: actions/checkout@v4
        with:
          ref: '${{inputs.pipeline_branch}}'
          repository: 'Netcracker/qubership-test-pipelines'
          path: 'qubership-test-pipelines'
      - name: Create cluster
        uses: ./qubership-test-pipelines/actions/shared/create_cluster
      #- name: Install Monitoring
        #uses: ./qubership-test-pipelines/actions/monitoring/helm_deploy_monitoring
      - name: Clean Install Zookeeper [LATEST]
        uses: ./qubership-test-pipelines/actions/zookeeper/helm_deploy_zookeeper
        with:
          path_to_template: 'templates/zookeeper-service/zookeeper_install_APP_k8s.yml'
          service_branch: '${{inputs.service_branch}}'
      - name: Verify Zookeeper installation
        uses: ./qubership-test-pipelines/actions/zookeeper/verify_installation_zookeeper
      - name: Sleep
        run: sleep 1m
      - name: Update to [LATEST] Version With Diff Params
        uses: ./qubership-test-pipelines/actions/zookeeper/helm_deploy_zookeeper
        with:
          path_to_template: 'templates/zookeeper-service/zookeeper_rollingupdate_APP_k8s.yml'
          service_branch: '${{inputs.service_branch}}'
          deploy_mode: upgrade
      - name: Verify Zookeeper upgrade
        uses: ./qubership-test-pipelines/actions/zookeeper/verify_installation_zookeeper

  #13-Clean [LATEST] non-TLS, 14-Upgrade [LATEST] TLS
  Clean-Latest-non-TLS-Upgrade-Latest-TLS:
    runs-on: ubuntu-latest
    name: Clean [LATEST], Upgrade [LATEST] TLS
    steps:
      - name: Checkout pipeline
        uses: actions/checkout@v4
        with:
          ref: '${{inputs.pipeline_branch}}'
          repository: 'Netcracker/qubership-test-pipelines'
          path: 'qubership-test-pipelines'
      - name: Create cluster
        uses: ./qubership-test-pipelines/actions/shared/create_cluster
      - name: Clean Install Zookeeper [LATEST]
        uses: ./qubership-test-pipelines/actions/zookeeper/helm_deploy_zookeeper
        with:
          path_to_template: 'templates/zookeeper-service/zookeeper_install_APP_k8s.yml'
          service_branch: '${{inputs.service_branch}}'
      - name: Verify Zookeeper installation
        uses: ./qubership-test-pipelines/actions/zookeeper/verify_installation_zookeeper
      - name: Install cert-manager
        run: |
          helm repo add jetstack https://charts.jetstack.io --force-update
          helm upgrade --install cert-manager jetstack/cert-manager --namespace cert-manager \
            --create-namespace --version v1.16.3 --set prometheus.enabled=true   --set crds.enabled=true
      - name: Crate ClusterIssuer
        run: |
          kubectl apply -f - <<EOF
          apiVersion: cert-manager.io/v1
          kind: ClusterIssuer
          metadata:
            name: test-clusterissuer
          spec:
            selfSigned: {}
          EOF
      - name: Get clusterissuer
        run: kubectl get clusterissuer
      - name: Sleep
        run: sleep 1m
      - name: Update Zookeeper to [LATEST] TLS
        uses: ./qubership-test-pipelines/actions/zookeeper/helm_deploy_zookeeper
        with:
          deploy_mode: upgrade
          path_to_template: 'templates/zookeeper-service/zookeeper_install_tls_APP_k8s.yml'
          service_branch: '${{inputs.service_branch}}'
      - name: Verify installation
        uses: ./qubership-test-pipelines/actions/zookeeper/verify_installation_zookeeper
        with:
          service_branch: ${{inputs.service_branch}}

  #15-Clean [LATEST] TLS
  Clean-Latest-TLS:
    runs-on: ubuntu-latest
    name: Clean [LATEST] TLS
    steps:
      - name: Checkout pipeline
        uses: actions/checkout@v4
        with:
          ref: '${{inputs.pipeline_branch}}'
          repository: 'Netcracker/qubership-test-pipelines'
          path: 'qubership-test-pipelines'
      - name: Create cluster
        uses: ./qubership-test-pipelines/actions/shared/create_cluster
      - name: Install cert-manager
        run: |
          helm repo add jetstack https://charts.jetstack.io --force-update
          helm upgrade --install cert-manager jetstack/cert-manager --namespace cert-manager \
            --create-namespace --version v1.16.3 --set prometheus.enabled=true   --set crds.enabled=true
      - name: Crate ClusterIssuer
        run: |
          kubectl apply -f - <<EOF
          apiVersion: cert-manager.io/v1
          kind: ClusterIssuer
          metadata:
            name: test-clusterissuer
          spec:
            selfSigned: {}
          EOF
      - name: Get clusterissuer
        run: kubectl get clusterissuer
      - name: Install Zookeeper [LATEST] TLS
        uses: ./qubership-test-pipelines/actions/zookeeper/helm_deploy_zookeeper
        with:
          path_to_template: 'templates/zookeeper-service/zookeeper_install_tls_APP_k8s.yml'
          service_branch: '${{inputs.service_branch}}'
      - name: Verify installation
        uses: ./qubership-test-pipelines/actions/zookeeper/verify_installation_zookeeper
        with:
          service_branch: ${{inputs.service_branch}}
      - name: Get secrets
        run: kubectl get secrets -n zookeeper
#      - name: Get secrets
#        run: |
#          kubectl get secret zookeeper-backup-daemon-tls-secret -oyaml -n zookeeper
#          kubectl get secret zookeeper-tls-secret -oyaml -n zookeeper
      - name: Get Zookeeper Certs
        uses: ./qubership-test-pipelines/actions/shared/get_certs
        with:
          service_name: zookeeper
          secret_name: zookeeper-tls-secret
          namespace: zookeeper

      - name: Get Backup-Daemon Certs
        uses: ./qubership-test-pipelines/actions/shared/get_certs
        with:
          service_name: zookeeper
          secret_name: zookeeper-backup-daemon-tls-secret
          namespace: zookeeper
      - name: Prepare artifacts directory
        run: mkdir -p certs_artifacts

      - name: Copy certs to artifacts
        run: |
          cp ${{runner.temp}}/zookeeper-tls-secret_*.txt certs_artifacts/
          cp ${{runner.temp}}/zookeeper-backup-daemon-tls-secret_*.txt certs_artifacts/

      - name: Upload certs artifacts
        uses: actions/upload-artifact@v4
        with:
          name: zookeeper-certs
          path: certs_artifacts
          retention-days: 1

#      - name: Add certs to output variables
#        id: certs_output
#        run: |
#          echo "zookeeper_ca_crt=$(cat ${{runner.temp}}/zookeeper-tls-secret_ca_crt.txt)" >> $GITHUB_OUTPUT
#          echo "zookeeper_tls_crt=$(cat ${{runner.temp}}/zookeeper-tls-secret_tls_crt.txt)" >> $GITHUB_OUTPUT
#          echo "zookeeper_tls_key=$(cat ${{runner.temp}}/zookeeper-tls-secret_tls_key.txt)" >> $GITHUB_OUTPUT
#          echo "backuper_ca_crt=$(cat ${{runner.temp}}/zookeeper-backup-daemon-tls-secret_ca_crt.txt)" >> $GITHUB_OUTPUT
#          echo "backuper_tls_crt=$(cat ${{runner.temp}}/zookeeper-backup-daemon-tls-secret_tls_crt.txt)" >> $GITHUB_OUTPUT
#          echo "backuper_tls_key=$(cat ${{runner.temp}}/zookeeper-backup-daemon-tls-secret_tls_key.txt)" >> $GITHUB_OUTPUT
#        run: |
#          zk_ca="$(cat ${{ runner.temp }}/zookeeper-tls-secret_ca_crt.txt)"
#          zk_crt="$(cat ${{ runner.temp }}/zookeeper-tls-secret_tls_crt.txt)"
#          zk_key="$(cat ${{ runner.temp }}/zookeeper-tls-secret_tls_key.txt)"
#          bu_ca="$(cat ${{ runner.temp }}/zookeeper-backup-daemon-tls-secret_ca_crt.txt)"
#          bu_crt="$(cat ${{ runner.temp }}/zookeeper-backup-daemon-tls-secret_tls_crt.txt)"
#          bu_key="$(cat ${{ runner.temp }}/zookeeper-backup-daemon-tls-secret_tls_key.txt)"
#
#          cat <<EOF >> $GITHUB_OUTPUT
#          zookeeper_ca_crt=$zk_ca
#          zookeeper_tls_crt=$zk_crt
#          zookeeper_tls_key=$zk_key
#          backuper_ca_crt=$bu_ca
#          backuper_tls_crt=$bu_crt
#          backuper_tls_key=$bu_key
#          EOF
#
#      - name: Debug outputs
#        run: |
#          echo "backuper_tls_crt: ${{ steps.certs_output.outputs.backuper_tls_crt }}"

  #16-Clean [LATEST] TLS Secrets
  Clean-Latest-TLS-Secrets:
    runs-on: ubuntu-latest
    needs: Clean-Latest-TLS
    name: Clean Zookeeper [LATEST] TLS Secrets
    steps:
      - name: Checkout pipeline
        uses: actions/checkout@v4
        with:
          ref: '${{inputs.pipeline_branch}}'
          repository: 'Netcracker/qubership-test-pipelines'
          path: 'qubership-test-pipelines'
      - name: Create cluster
        uses: ./qubership-test-pipelines/actions/shared/create_cluster
      - name: Download zookeeper certs artifacts
        uses: actions/download-artifact@v4
        with:
          name: zookeeper-certs
          path: certs_artifacts
      - name: Update secrets
        uses: ./qubership-test-pipelines/actions/zookeeper/add_certs_to_secrets
      - name: Clean Install Zookeeper [LATEST] TLS Secrets
        uses: ./qubership-test-pipelines/actions/zookeeper/helm_deploy_zookeeper
        with:
          path_to_template: 'templates/zookeeper-service/zookeeper_install_tls_secrets.yml'
          service_branch: '${{inputs.service_branch}}'
          resource_folder: 'resources/zookeeper'
      - name: Verify Zookeeper installation
        uses: ./qubership-test-pipelines/actions/zookeeper/verify_installation_zookeeper

  #17-Upgrade [LATEST] TLS Certificates -> Clean [LATEST] TLS Certificates
  Clean-Latest-TLS-Certificates:
    runs-on: ubuntu-latest
    needs: Clean-Latest-TLS
    name: Clean [LATEST] TLS Certificates
    steps:
      - name: Checkout pipeline
        uses: actions/checkout@v4
        with:
          ref: '${{inputs.pipeline_branch}}'
          repository: 'Netcracker/qubership-test-pipelines'
          path: 'qubership-test-pipelines'
      - name: Create cluster
        uses: ./qubership-test-pipelines/actions/shared/create_cluster
      - name: Download certs artifacts
        uses: actions/download-artifact@v4
        with:
          name: zookeeper-certs
          path: certs_artifacts
      - name: Update template
        uses: ./qubership-test-pipelines/actions/zookeeper/add_certs_to_template
      - name: Print template
        run: cat qubership-test-pipelines/templates/zookeeper-service/zookeeper_install_tls_certs.yml
      - name: Clean Zookeeper to [LATEST] TLS Certificates
        uses: ./qubership-test-pipelines/actions/zookeeper/helm_deploy_zookeeper
        with:
          path_to_template: 'templates/zookeeper-service/zookeeper_install_tls_certs.yml'
          service_branch: '${{inputs.service_branch}}'
      - name: Verify installation
        uses: ./qubership-test-pipelines/actions/zookeeper/verify_installation_zookeeper
        with:
          service_branch: ${{inputs.service_branch}}

  #21-Clean [LATEST] Restricted
  Clean-Latest-Restricted:
    name: Clean [LATEST] Restricted
    runs-on: ubuntu-latest
    steps:
      - name: Checkout pipeline
        uses: actions/checkout@v4
        with:
          ref: '${{inputs.pipeline_branch}}'
          repository: 'Netcracker/qubership-test-pipelines'
          path: 'qubership-test-pipelines'
      - name: Create cluster
        uses: ./qubership-test-pipelines/actions/shared/create_cluster
      - name: Clean Install Zookeeper [LATEST] in Restricted mode
        uses: ./qubership-test-pipelines/actions/zookeeper/helm_deploy_zookeeper
        with:
          restricted: true
          path_to_template: 'templates/zookeeper-service/zookeeper_install_restricted_APP.yml'
          service_branch: '${{inputs.service_branch}}'
      - name: Verify Zookeeper installation
        uses: ./qubership-test-pipelines/actions/zookeeper/verify_installation_zookeeper

  #---------- Update from old releases ----------
  #6-Clean [N1_RELEASE], 7-Upgrade From [N1_RELEASE] To [LATEST_SPRINT]
  #8-Clean [N2_RELEASE], 9-Upgrade From [N2_RELEASE] To [LATEST_SPRINT]
  Clean-Previous-Update-To-Latest:
    name: Clean [PREVIOUS], Update to [LATEST]
    needs: prepare-versions
    runs-on: ubuntu-latest
    strategy:
      matrix:
        release: ${{fromJson(needs.prepare-versions.outputs.versions)}}
    steps:
      - name: Checkout pipeline
        uses: actions/checkout@v4
        with:
          ref: '${{inputs.pipeline_branch}}'
          repository: 'Netcracker/qubership-test-pipelines'
          path: 'qubership-test-pipelines'
      - name: Create cluster
        uses: ./qubership-test-pipelines/actions/shared/create_cluster
      #- name: Install monitoring
        #uses: ./qubership-test-pipelines/actions/monitoring/helm_deploy_monitoring
      - name: Clean Install Zookeeper [PREVIOUS]
        uses: ./qubership-test-pipelines/actions/zookeeper/helm_deploy_zookeeper
        with:
          path_to_template: 'templates/zookeeper-service/zookeeper_install_APP_k8s.yml'
          service_branch: '${{matrix.release}}'
#      - name: Check Status In CR
#        uses: ./qubership-test-pipelines/actions/shared/check_status_in_cr
#        with:
#          namespace: zookeeper
      - name: Verify Zookeeper installation
        uses: ./qubership-test-pipelines/actions/zookeeper/verify_installation_zookeeper
        with:
          service_branch: '${{matrix.release}}'
      - name: Sleep
        run: sleep 1m
      - name: Update Zookeeper to [LATEST]
        uses: ./qubership-test-pipelines/actions/zookeeper/helm_deploy_zookeeper
        with:
          deploy_mode: upgrade
          path_to_template: 'templates/zookeeper-service/zookeeper_install_APP_k8s.yml'
          service_branch: '${{inputs.service_branch}}'
#      - name: Check Status In CR
#        uses: ./qubership-test-pipelines/actions/shared/check_status_in_cr
#        with:
#          namespace: zookeeper
      - name: Verify installation
        uses: ./qubership-test-pipelines/actions/zookeeper/verify_installation_zookeeper
        with:
          service_branch: ${{inputs.service_branch}}

  # ---------- Upgrade from previous versions ----------
  #19-Clean [PREVIOUS] Restricted, 20-Upgrade From [PREVIOUS] To [LATEST] Restricted
  Clean-Previous-Upgrade-To-Latest-Restricted:
    name: Clean [PREVIOUS] Restricted, Upgrade To [LATEST] Restricted
    needs: prepare-versions
    runs-on: ubuntu-latest
    steps:
      - name: Checkout pipeline
        uses: actions/checkout@v4
        with:
          ref: '${{inputs.pipeline_branch}}'
          repository: 'Netcracker/qubership-test-pipelines'
          path: 'qubership-test-pipelines'
      - name: Get version
        run: echo ${{needs.prepare-versions.outputs.previous_version}}
      - name: Create cluster
        uses: ./qubership-test-pipelines/actions/shared/create_cluster
      - name: Clean Install Zookeeper [PREVIOUS] in Restricted mode
        uses: ./qubership-test-pipelines/actions/zookeeper/helm_deploy_zookeeper
        with:
          restricted: true
          path_to_template: 'templates/zookeeper-service/zookeeper_install_APP_k8s.yml'
          service_branch: '${{needs.prepare-versions.outputs.previous_version}}'
      #- name: Sleep
      #  run: sleep 2m
#      - name: Check Status In CR
#        uses: ./qubership-test-pipelines/actions/shared/check_status_in_cr
#        with:
#          namespace: zookeeper
      - name: Verify Zookeeper installation
        uses: ./qubership-test-pipelines/actions/zookeeper/verify_installation_zookeeper
        with:
          service_branch: '${{needs.prepare-versions.outputs.previous_version}}'
      - name: Sleep
        run: sleep 1m
      - name: Update Zookeeper to [LATEST] in Restricted mode
        uses: ./qubership-test-pipelines/actions/zookeeper/helm_deploy_zookeeper
        with:
          restricted: true
          deploy_mode: upgrade
          path_to_template: 'templates/zookeeper-service/zookeeper_install_APP_k8s.yml'
          service_branch: '${{inputs.service_branch}}'
#      - name: Check Status In CR
#        uses: ./qubership-test-pipelines/actions/shared/check_status_in_cr
#        with:
#          namespace: zookeeper
      - name: Verify Zookeeper upgrade
        uses: ./qubership-test-pipelines/actions/zookeeper/verify_installation_zookeeper
        with:
          service_branch: ${{inputs.service_branch}}
